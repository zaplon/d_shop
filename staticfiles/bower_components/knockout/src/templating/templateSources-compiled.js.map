{"version":3,"sources":["../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/templating/templateSources.js"],"names":[],"mappings":"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","file":"templateSources-compiled.js","sourcesContent":["(function() {\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\n    //\n    // Two are provided by default:\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\n    //                                           without reading/writing the actual element text content, since it will be overwritten\n    //                                           with the rendered template output.\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\n    // Template sources need to have the following functions:\n    //   text() \t\t\t- returns the template text from your storage location\n    //   text(value)\t\t- writes the supplied template text to your storage location\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\n    //\n    // Optionally, template sources can also have the following functions:\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\n    //   nodes(value)       - writes the given DOM element to your storage location\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\n    //\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\n\n    ko.templateSources = {};\n\n    // ---- ko.templateSources.domElement -----\n\n    // template types\n    var templateScript = 1,\n        templateTextArea = 2,\n        templateTemplate = 3,\n        templateElement = 4;\n\n    ko.templateSources.domElement = function(element) {\n        this.domElement = element;\n\n        if (element) {\n            var tagNameLower = ko.utils.tagNameLower(element);\n            this.templateType =\n                tagNameLower === \"script\" ? templateScript :\n                tagNameLower === \"textarea\" ? templateTextArea :\n                    // For browsers with proper <template> element support, where the .content property gives a document fragment\n                tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\n                templateElement;\n        }\n    }\n\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\n        var elemContentsProperty = this.templateType === templateScript ? \"text\"\n                                 : this.templateType === templateTextArea ? \"value\"\n                                 : \"innerHTML\";\n\n        if (arguments.length == 0) {\n            return this.domElement[elemContentsProperty];\n        } else {\n            var valueToWrite = arguments[0];\n            if (elemContentsProperty === \"innerHTML\")\n                ko.utils.setHtml(this.domElement, valueToWrite);\n            else\n                this.domElement[elemContentsProperty] = valueToWrite;\n        }\n    };\n\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\n        if (arguments.length === 1) {\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\n        } else {\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\n        }\n    };\n\n    var templatesDomDataKey = ko.utils.domData.nextKey();\n    function getTemplateDomData(element) {\n        return ko.utils.domData.get(element, templatesDomDataKey) || {};\n    }\n    function setTemplateDomData(element, data) {\n        ko.utils.domData.set(element, templatesDomDataKey, data);\n    }\n\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\n        var element = this.domElement;\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(element),\n                containerData = templateData.containerData;\n            return containerData || (\n                this.templateType === templateTemplate ? element.content :\n                this.templateType === templateElement ? element :\n                undefined);\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(element, {containerData: valueToWrite});\n        }\n    };\n\n    // ---- ko.templateSources.anonymousTemplate -----\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\n\n    ko.templateSources.anonymousTemplate = function(element) {\n        this.domElement = element;\n    }\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(this.domElement);\n            if (templateData.textData === undefined && templateData.containerData)\n                templateData.textData = templateData.containerData.innerHTML;\n            return templateData.textData;\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(this.domElement, {textData: valueToWrite});\n        }\n    };\n\n    ko.exportSymbol('templateSources', ko.templateSources);\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\n})();\n"]}