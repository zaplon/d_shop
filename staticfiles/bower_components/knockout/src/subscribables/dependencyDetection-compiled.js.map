{"version":3,"sources":["../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/subscribables/dependencyDetection.js"],"names":[],"mappings":";AACA,GAAG,eAAH,GAAqB,GAAG,mBAAH,GAA0B,YAAY;AACvD,QAAI,cAAc,EAAlB;AAAA,QACI,YADJ;AAAA,QAEI,SAAS,CAFb;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,aAAS,KAAT,GAAiB;AACb,eAAO,EAAE,MAAT;AACH;;AAED,aAAS,KAAT,CAAe,OAAf,EAAwB;AACpB,oBAAY,IAAZ,CAAiB,YAAjB;AACA,uBAAe,OAAf;AACH;;AAED,aAAS,GAAT,GAAe;AACX,uBAAe,YAAY,GAAZ,EAAf;AACH;;AAED,WAAO;AACH,eAAO,KADJ;;AAGH,aAAK,GAHF;;AAKH,4BAAoB,UAAU,YAAV,EAAwB;AACxC,gBAAI,YAAJ,EAAkB;AACd,oBAAI,CAAC,GAAG,cAAH,CAAkB,YAAlB,CAAL,EACI,MAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACJ,6BAAa,QAAb,CAAsB,IAAtB,CAA2B,aAAa,cAAxC,EAAwD,YAAxD,EAAsE,aAAa,GAAb,KAAqB,aAAa,GAAb,GAAmB,OAAxC,CAAtE;AACH;AACJ,SAXE;;AAaH,gBAAQ,UAAU,QAAV,EAAoB,cAApB,EAAoC,YAApC,EAAkD;AACtD,gBAAI;AACA;AACA,uBAAO,SAAS,KAAT,CAAe,cAAf,EAA+B,gBAAgB,EAA/C,CAAP;AACH,aAHD,SAGU;AACN;AACH;AACJ,SApBE;;AAsBH,8BAAsB,YAAY;AAC9B,gBAAI,YAAJ,EACI,OAAO,aAAa,QAAb,CAAsB,oBAAtB,EAAP;AACP,SAzBE;;AA2BH,mBAAW,YAAW;AAClB,gBAAI,YAAJ,EACI,OAAO,aAAa,SAApB;AACP;AA9BE,KAAP;AAgCH,CAxD6C,EAA9C;;AA0DA,GAAG,YAAH,CAAgB,iBAAhB,EAAmC,GAAG,eAAtC;AACA,GAAG,YAAH,CAAgB,sCAAhB,EAAwD,GAAG,eAAH,CAAmB,oBAA3E;AACA,GAAG,YAAH,CAAgB,2BAAhB,EAA6C,GAAG,eAAH,CAAmB,SAAhE;;AAEA,GAAG,YAAH,CAAgB,oBAAhB,EAAsC,GAAG,kBAAH,GAAwB,GAAG,mBAAH,CAAuB,MAArF","file":"dependencyDetection-compiled.js","sourcesContent":["\nko.computedContext = ko.dependencyDetection = (function () {\n    var outerFrames = [],\n        currentFrame,\n        lastId = 0;\n\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\n    // Theoretically, you could eventually overflow the number storage size, resulting\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\n    // take over 285 years to reach that number.\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\n    function getId() {\n        return ++lastId;\n    }\n\n    function begin(options) {\n        outerFrames.push(currentFrame);\n        currentFrame = options;\n    }\n\n    function end() {\n        currentFrame = outerFrames.pop();\n    }\n\n    return {\n        begin: begin,\n\n        end: end,\n\n        registerDependency: function (subscribable) {\n            if (currentFrame) {\n                if (!ko.isSubscribable(subscribable))\n                    throw new Error(\"Only subscribable things can act as dependencies\");\n                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\n            }\n        },\n\n        ignore: function (callback, callbackTarget, callbackArgs) {\n            try {\n                begin();\n                return callback.apply(callbackTarget, callbackArgs || []);\n            } finally {\n                end();\n            }\n        },\n\n        getDependenciesCount: function () {\n            if (currentFrame)\n                return currentFrame.computed.getDependenciesCount();\n        },\n\n        isInitial: function() {\n            if (currentFrame)\n                return currentFrame.isInitial;\n        }\n    };\n})();\n\nko.exportSymbol('computedContext', ko.computedContext);\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\n\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\n"]}