{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/defaultBindings/attr.js"],"names":[],"mappings":"AAAA,IAAI,0BAA0B,EAAE,SAAS,WAAX,EAAwB,OAAO,SAA/B,EAA9B;AACA,GAAG,eAAH,CAAmB,MAAnB,IAA6B;AACzB,cAAU,UAAS,OAAT,EAAkB,aAAlB,EAAiC,WAAjC,EAA8C;AACpD,YAAI,QAAQ,GAAG,KAAH,CAAS,gBAAT,CAA0B,eAA1B,KAA8C,EAA1D;AACA,WAAG,KAAH,CAAS,aAAT,CAAuB,KAAvB,EAA8B,UAAS,QAAT,EAAmB,SAAnB,EAA8B;AACxD,wBAAY,GAAG,KAAH,CAAS,gBAAT,CAA0B,SAA1B,CAAZ;;AAEA;AACA;AACA;AACA,gBAAI,WAAY,cAAc,KAAf,IAA0B,cAAc,IAAxC,IAAkD,cAAc,SAA/E;AACA,gBAAI,QAAJ,EACI,QAAQ,eAAR,CAAwB,QAAxB;;AAEJ;AACA;AACA;AACA;AACA,gBAAI,GAAG,KAAH,CAAS,SAAT,IAAsB,CAAtB,IAA2B,YAAY,uBAA3C,EAAoE;AAChE,2BAAW,wBAAwB,QAAxB,CAAX;AACA,oBAAI,QAAJ,EACI,QAAQ,eAAR,CAAwB,QAAxB,EADJ,KAGI,QAAQ,QAAR,IAAoB,SAApB;AACP,aAND,MAMO,IAAI,CAAC,QAAL,EAAe;AAClB,wBAAQ,YAAR,CAAqB,QAArB,EAA+B,UAAU,QAAV,EAA/B;AACH;;AAED;AACA;AACA;AACA;AACA,gBAAI,aAAa,MAAjB,EAAyB;AACrB,mBAAG,KAAH,CAAS,cAAT,CAAwB,OAAxB,EAAiC,WAAW,EAAX,GAAgB,UAAU,QAAV,EAAjD;AACH;AACJ,SA/BD;AAgCH;AAnCwB,CAA7B","file":"attr-compiled.js","sourcesContent":["var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\nko.bindingHandlers['attr'] = {\n    'update': function(element, valueAccessor, allBindings) {\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\n            attrValue = ko.utils.unwrapObservable(attrValue);\n\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\n            if (toRemove)\n                element.removeAttribute(attrName);\n\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\n            // property for IE <= 8.\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\n                attrName = attrHtmlToJavascriptMap[attrName];\n                if (toRemove)\n                    element.removeAttribute(attrName);\n                else\n                    element[attrName] = attrValue;\n            } else if (!toRemove) {\n                element.setAttribute(attrName, attrValue.toString());\n            }\n\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\n            // entirely, and there's no strong reason to allow for such casing in HTML.\n            if (attrName === \"name\") {\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\n            }\n        });\n    }\n};\n"]}