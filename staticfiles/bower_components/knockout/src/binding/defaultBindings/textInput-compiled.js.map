{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/defaultBindings/textInput.js"],"names":[],"mappings":"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","file":"textInput-compiled.js","sourcesContent":["(function () {\n\nif (window && window.navigator) {\n    var parseVersion = function (matches) {\n        if (matches) {\n            return parseFloat(matches[1]);\n        }\n    };\n\n    // Detect various browser versions because some old versions don't fully support the 'input' event\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\n        userAgent = window.navigator.userAgent,\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\n}\n\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\n// But it does fire the 'selectionchange' event on many of those, presumably because the\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\n// fired at the document level only and doesn't directly indicate which element changed. We\n// set up just one event handler for the document and use 'activeElement' to determine which\n// element was changed.\nif (ko.utils.ieVersion < 10) {\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\n    var selectionChangeHandler = function(event) {\n        var target = this.activeElement,\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\n        if (handler) {\n            handler(event);\n        }\n    };\n    var registerForSelectionChangeEvent = function (element, handler) {\n        var ownerDoc = element.ownerDocument;\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\n        }\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\n    };\n}\n\nko.bindingHandlers['textInput'] = {\n    'init': function (element, valueAccessor, allBindings) {\n\n        var previousElementValue = element.value,\n            timeoutHandle,\n            elementValueBeforeEvent;\n\n        var updateModel = function (event) {\n            clearTimeout(timeoutHandle);\n            elementValueBeforeEvent = timeoutHandle = undefined;\n\n            var elementValue = element.value;\n            if (previousElementValue !== elementValue) {\n                // Provide a way for tests to know exactly which event was processed\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\n                previousElementValue = elementValue;\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\n            }\n        };\n\n        var deferUpdateModel = function (event) {\n            if (!timeoutHandle) {\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\n                // event firing and the updateModel function running. This allows us to ignore model\n                // updates that are from the previous state of the element, usually due to techniques\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\n                elementValueBeforeEvent = element.value;\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\n                timeoutHandle = ko.utils.setTimeout(handler, 4);\n            }\n        };\n\n        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\n        // so we'll make sure all updates are asynchronous\n        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\n\n        var updateView = function () {\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (modelValue === null || modelValue === undefined) {\n                modelValue = '';\n            }\n\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\n                ko.utils.setTimeout(updateView, 4);\n                return;\n            }\n\n            // Update the element only if the element and model are different. On some browsers, updating the value\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\n            if (element.value !== modelValue) {\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\n                element.value = modelValue;\n            }\n        };\n\n        var onEvent = function (event, handler) {\n            ko.utils.registerEventHandler(element, event, handler);\n        };\n\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\n            // Provide a way for tests to specify exactly which events are bound\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\n                if (eventName.slice(0,5) == 'after') {\n                    onEvent(eventName.slice(5), deferUpdateModel);\n                } else {\n                    onEvent(eventName, updateModel);\n                }\n            });\n        } else {\n            if (ko.utils.ieVersion < 10) {\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\n                // when using autocomplete, we'll use 'propertychange' for it also.\n                onEvent('propertychange', function(event) {\n                    if (event.propertyName === 'value') {\n                        ieUpdateModel(event);\n                    }\n                });\n\n                if (ko.utils.ieVersion == 8) {\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\n                    // events too.\n                    onEvent('keyup', updateModel);      // A single keystoke\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\n                }\n                if (ko.utils.ieVersion >= 8) {\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\n                    // These are also needed in IE8 because of the bug described above.\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\n                    onEvent('dragend', deferUpdateModel);\n                }\n            } else {\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\n                // through the user interface.\n                onEvent('input', updateModel);\n\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\n                    onEvent('keydown', deferUpdateModel);\n                    onEvent('paste', deferUpdateModel);\n                    onEvent('cut', deferUpdateModel);\n                } else if (operaVersion < 11) {\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\n                    // We can try to catch some of those using 'keydown'.\n                    onEvent('keydown', deferUpdateModel);\n                } else if (firefoxVersion < 4.0) {\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\n                    onEvent('DOMAutoComplete', updateModel);\n\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\n                    onEvent('dragdrop', updateModel);       // <3.5\n                    onEvent('drop', updateModel);           // 3.5\n                }\n            }\n        }\n\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\n        onEvent('change', updateModel);\n\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n    }\n};\nko.expressionRewriting.twoWayBindings['textInput'] = true;\n\n// textinput is an alias for textInput\nko.bindingHandlers['textinput'] = {\n    // preprocess is the only way to set up a full alias\n    'preprocess': function (value, name, addBinding) {\n        addBinding('textInput', value);\n    }\n};\n\n})();"]}