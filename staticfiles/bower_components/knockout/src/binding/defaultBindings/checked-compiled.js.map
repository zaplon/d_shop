{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/defaultBindings/checked.js"],"names":[],"mappings":"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","file":"checked-compiled.js","sourcesContent":["(function() {\n\nko.bindingHandlers['checked'] = {\n    'after': ['value', 'attr'],\n    'init': function (element, valueAccessor, allBindings) {\n        var checkedValue = ko.pureComputed(function() {\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\n            if (allBindings['has']('checkedValue')) {\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\n            } else if (allBindings['has']('value')) {\n                return ko.utils.unwrapObservable(allBindings.get('value'));\n            }\n\n            return element.value;\n        });\n\n        function updateModel() {\n            // This updates the model value from the view value.\n            // It runs in response to DOM events (click) and changes in checkedValue.\n            var isChecked = element.checked,\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\n\n            // When we're first setting up this computed, don't change any model state.\n            if (ko.computedContext.isInitial()) {\n                return;\n            }\n\n            // We can ignore unchecked radio buttons, because some other radio\n            // button will be getting checked, and that one can take care of updating state.\n            if (isRadio && !isChecked) {\n                return;\n            }\n\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\n            if (valueIsArray) {\n                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\n                if (oldElemValue !== elemValue) {\n                    // When we're responding to the checkedValue changing, and the element is\n                    // currently checked, replace the old elem value with the new elem value\n                    // in the model array.\n                    if (isChecked) {\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\n                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\n                    }\n\n                    oldElemValue = elemValue;\n                } else {\n                    // When we're responding to the user having checked/unchecked a checkbox,\n                    // add/remove the element value to the model array.\n                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\n                }\n                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\n                    modelValue(writableValue);\n                }\n            } else {\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\n            }\n        };\n\n        function updateView() {\n            // This updates the view value from the model value.\n            // It runs in response to changes in the bound (checked) value.\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (valueIsArray) {\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\n            } else if (isCheckbox) {\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\n                element.checked = modelValue;\n            } else {\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\n                element.checked = (checkedValue() === modelValue);\n            }\n        };\n\n        var isCheckbox = element.type == \"checkbox\",\n            isRadio = element.type == \"radio\";\n\n        // Only bind to check boxes and radio buttons\n        if (!isCheckbox && !isRadio) {\n            return;\n        }\n\n        var rawValue = valueAccessor(),\n            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\n            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\n            oldElemValue = valueIsArray ? checkedValue() : undefined,\n            useCheckedValue = isRadio || valueIsArray;\n\n        // IE 6 won't allow radio buttons to be selected unless they have a name\n        if (isRadio && !element.name)\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\n\n        // Set up two computeds to update the binding:\n\n        // The first responds to changes in the checkedValue value and to element clicks\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\n\n        // The second responds to changes in the model value (the one associated with the checked binding)\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n\n        rawValue = undefined;\n    }\n};\nko.expressionRewriting.twoWayBindings['checked'] = true;\n\nko.bindingHandlers['checkedValue'] = {\n    'update': function (element, valueAccessor) {\n        element.value = ko.utils.unwrapObservable(valueAccessor());\n    }\n};\n\n})();"]}