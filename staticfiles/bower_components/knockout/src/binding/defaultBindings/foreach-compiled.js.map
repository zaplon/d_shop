{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/defaultBindings/foreach.js"],"names":[],"mappings":"AAAA;AACA;AACA,GAAG,eAAH,CAAmB,SAAnB,IAAgC;AAC5B,+BAA2B,UAAS,aAAT,EAAwB;AAC/C,eAAO,YAAW;AACd,gBAAI,aAAa,eAAjB;AAAA,gBACI,iBAAiB,GAAG,KAAH,CAAS,cAAT,CAAwB,UAAxB,CADrB,CAC6D;;AAE7D;AACA;AACA;AACA,gBAAK,CAAC,cAAF,IAAqB,OAAO,eAAe,MAAtB,IAAgC,QAAzD,EACI,OAAO,EAAE,WAAW,UAAb,EAAyB,kBAAkB,GAAG,oBAAH,CAAwB,QAAnE,EAAP;;AAEJ;AACA,eAAG,KAAH,CAAS,gBAAT,CAA0B,UAA1B;AACA,mBAAO;AACH,2BAAW,eAAe,MAAf,CADR;AAEH,sBAAM,eAAe,IAAf,CAFH;AAGH,oCAAoB,eAAe,kBAAf,CAHjB;AAIH,4BAAY,eAAe,UAAf,CAJT;AAKH,gCAAgB,eAAe,cAAf,CALb;AAMH,+BAAe,eAAe,aAAf,CANZ;AAOH,8BAAc,eAAe,YAAf,CAPX;AAQH,6BAAa,eAAe,WAAf,CARV;AASH,kCAAkB,GAAG,oBAAH,CAAwB;AATvC,aAAP;AAWH,SAvBD;AAwBH,KA1B2B;AA2B5B,YAAQ,UAAS,OAAT,EAAkB,aAAlB,EAAiC,WAAjC,EAA8C,SAA9C,EAAyD,cAAzD,EAAyE;AAC7E,eAAO,GAAG,eAAH,CAAmB,UAAnB,EAA+B,MAA/B,EAAuC,OAAvC,EAAgD,GAAG,eAAH,CAAmB,SAAnB,EAA8B,yBAA9B,CAAwD,aAAxD,CAAhD,CAAP;AACH,KA7B2B;AA8B5B,cAAU,UAAS,OAAT,EAAkB,aAAlB,EAAiC,WAAjC,EAA8C,SAA9C,EAAyD,cAAzD,EAAyE;AAC/E,eAAO,GAAG,eAAH,CAAmB,UAAnB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkD,GAAG,eAAH,CAAmB,SAAnB,EAA8B,yBAA9B,CAAwD,aAAxD,CAAlD,EAA0H,WAA1H,EAAuI,SAAvI,EAAkJ,cAAlJ,CAAP;AACH;AAhC2B,CAAhC;AAkCA,GAAG,mBAAH,CAAuB,wBAAvB,CAAgD,SAAhD,IAA6D,KAA7D,CAAoE;AACpE,GAAG,eAAH,CAAmB,eAAnB,CAAmC,SAAnC,IAAgD,IAAhD","file":"foreach-compiled.js","sourcesContent":["// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\nko.bindingHandlers['foreach'] = {\n    makeTemplateValueAccessor: function(valueAccessor) {\n        return function() {\n            var modelValue = valueAccessor(),\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\n\n            // If unwrappedValue is the array, pass in the wrapped value on its own\n            // The value will be unwrapped and tracked within the template binding\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\n\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\n            ko.utils.unwrapObservable(modelValue);\n            return {\n                'foreach': unwrappedValue['data'],\n                'as': unwrappedValue['as'],\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\n                'afterAdd': unwrappedValue['afterAdd'],\n                'beforeRemove': unwrappedValue['beforeRemove'],\n                'afterRender': unwrappedValue['afterRender'],\n                'beforeMove': unwrappedValue['beforeMove'],\n                'afterMove': unwrappedValue['afterMove'],\n                'templateEngine': ko.nativeTemplateEngine.instance\n            };\n        };\n    },\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\n    },\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\n    }\n};\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\nko.virtualElements.allowedBindings['foreach'] = true;\n"]}