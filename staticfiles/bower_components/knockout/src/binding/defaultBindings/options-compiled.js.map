{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/defaultBindings/options.js"],"names":[],"mappings":"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","file":"options-compiled.js","sourcesContent":["var captionPlaceholder = {};\nko.bindingHandlers['options'] = {\n    'init': function(element) {\n        if (ko.utils.tagNameLower(element) !== \"select\")\n            throw new Error(\"options binding applies only to SELECT elements\");\n\n        // Remove all existing <option>s.\n        while (element.length > 0) {\n            element.remove(0);\n        }\n\n        // Ensures that the binding processor doesn't try to bind the options\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor, allBindings) {\n        function selectedOptions() {\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\n        }\n\n        var selectWasPreviouslyEmpty = element.length == 0,\n            multiple = element.multiple,\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\n            arrayToDomNodeChildrenOptions = {},\n            captionValue,\n            filteredArray,\n            previousSelectedValues = [];\n\n        if (!valueAllowUnset) {\n            if (multiple) {\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\n            } else if (element.selectedIndex >= 0) {\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\n            }\n        }\n\n        if (unwrappedArray) {\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                unwrappedArray = [unwrappedArray];\n\n            // Filter out any entries marked as destroyed\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n            });\n\n            // If caption is included, add it to the array\n            if (allBindings['has']('optionsCaption')) {\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\n                // If caption value is null or undefined, don't show a caption\n                if (captionValue !== null && captionValue !== undefined) {\n                    filteredArray.unshift(captionPlaceholder);\n                }\n            }\n        } else {\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\n        }\n\n        function applyToObject(object, predicate, defaultValue) {\n            var predicateType = typeof predicate;\n            if (predicateType == \"function\")    // Given a function; run it against the data value\n                return predicate(object);\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\n                return object[predicate];\n            else                                // Given no optionsText arg; use the data value itself\n                return defaultValue;\n        }\n\n        // The following functions can run at two different times:\n        // The first is when the whole array is being updated directly from this binding handler.\n        // The second is when an observable value for a specific array entry is updated.\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\n        var itemUpdate = false;\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\n            if (oldOptions.length) {\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\n                itemUpdate = true;\n            }\n            var option = element.ownerDocument.createElement(\"option\");\n            if (arrayEntry === captionPlaceholder) {\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\n                ko.selectExtensions.writeValue(option, undefined);\n            } else {\n                // Apply a value to the option element\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\n\n                // Apply some text to the option element\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\n                ko.utils.setTextContent(option, optionText);\n            }\n            return [option];\n        }\n\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\n            function (option) {\n                element.removeChild(option);\n            };\n\n        function setSelectionCallback(arrayEntry, newOptions) {\n            if (itemUpdate && valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else if (previousSelectedValues.length) {\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\n                // That's why we first added them without selection. Now it's time to set the selection.\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\n\n                // If this option was changed from being selected during a single-item update, notify the change\n                if (itemUpdate && !isSelected) {\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                }\n            }\n        }\n\n        var callback = setSelectionCallback;\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\n            callback = function(arrayEntry, newOptions) {\n                setSelectionCallback(arrayEntry, newOptions);\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\n            }\n        }\n\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\n\n        ko.dependencyDetection.ignore(function () {\n            if (valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else {\n                // Determine if the selection has changed as a result of updating the options list\n                var selectionChanged;\n                if (multiple) {\n                    // For a multiple-select box, compare the new selection count to the previous one\n                    // But if nothing was selected before, the selection can't have changed\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\n                } else {\n                    // For a single-select box, compare the current value to the previous value\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\n                }\n\n                // Ensure consistency between model value and selected option.\n                // If the dropdown was changed so that selection is no longer the same,\n                // notify the value or selectedOptions binding.\n                if (selectionChanged) {\n                    ko.utils.triggerEvent(element, \"change\");\n                }\n            }\n        });\n\n        // Workaround for IE bug\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\n\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\n            element.scrollTop = previousScrollTop;\n    }\n};\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\n"]}