{"version":3,"sources":["../../../../../../../../../../../../home/jan/workspace/django_shop/shop/staticfiles/bower_components/knockout/src/binding/editDetection/compareArrays.js"],"names":[],"mappings":"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","file":"compareArrays-compiled.js","sourcesContent":["// Go through the items that have been added and deleted and try to find matches between them.\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\n    if (left.length && right.length) {\n        var failedCompares, l, r, leftItem, rightItem;\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\n            for (r = 0; rightItem = right[r]; ++r) {\n                if (leftItem['value'] === rightItem['value']) {\n                    leftItem['moved'] = rightItem['index'];\n                    rightItem['moved'] = leftItem['index'];\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\n                    break;\n                }\n            }\n            failedCompares += r;\n        }\n    }\n};\n\nko.utils.compareArrays = (function () {\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\n\n    // Simple calculation based on Levenshtein distance.\n    function compareArrays(oldArray, newArray, options) {\n        // For backward compatibility, if the third arg is actually a bool, interpret\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\n        oldArray = oldArray || [];\n        newArray = newArray || [];\n\n        if (oldArray.length < newArray.length)\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\n        else\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\n    }\n\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\n        var myMin = Math.min,\n            myMax = Math.max,\n            editDistanceMatrix = [],\n            smlIndex, smlIndexMax = smlArray.length,\n            bigIndex, bigIndexMax = bigArray.length,\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\n            maxDistance = smlIndexMax + bigIndexMax + 1,\n            thisRow, lastRow,\n            bigIndexMaxForRow, bigIndexMinForRow;\n\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\n            lastRow = thisRow;\n            editDistanceMatrix.push(thisRow = []);\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\n                if (!bigIndex)\n                    thisRow[bigIndex] = smlIndex + 1;\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\n                    thisRow[bigIndex] = bigIndex + 1;\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\n                else {\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\n                }\n            }\n        }\n\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\n                notInSml.push(editScript[editScript.length] = {     // added\n                    'status': statusNotInSml,\n                    'value': bigArray[--bigIndex],\n                    'index': bigIndex });\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\n                notInBig.push(editScript[editScript.length] = {     // deleted\n                    'status': statusNotInBig,\n                    'value': smlArray[--smlIndex],\n                    'index': smlIndex });\n            } else {\n                --bigIndex;\n                --smlIndex;\n                if (!options['sparse']) {\n                    editScript.push({\n                        'status': \"retained\",\n                        'value': bigArray[bigIndex] });\n                }\n            }\n        }\n\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\n        // smlIndexMax keeps the time complexity of this algorithm linear.\n        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\n\n        return editScript.reverse();\n    }\n\n    return compareArrays;\n})();\n\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\n"]}